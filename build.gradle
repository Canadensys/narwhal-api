apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'tomcat'

//Make sure tomcat will run with the right encoding
System.setProperty('file.encoding', 'UTF-8')

repositories {
	maven {url 'http://repo.opengeo.org'}
	maven {url 'http://download.java.net/maven/2'}

    mavenCentral()
    mavenLocal()
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:0.9.8'
    }
}

ext {
sourceEncoding = 'UTF-8'

    springVersion = '3.2.4.RELEASE'
    jacksonVersion = '2.2.3'
	geotoolsVersion = '10.0'
	tomcatVersion = '6.0.29'
	seleniumVersion = '2.33.0'
}

compileJava.options.encoding = sourceEncoding
compileTestJava.options.encoding = sourceEncoding

dependencies {
	providedCompile group: 'javax.servlet', name: 'servlet-api', version: '2.5'
	providedCompile group: 'javax.servlet', name: 'jsp-api', version: '2.0'
	
	compile group: 'org.geotools', name: 'gt-geojson', version: geotoolsVersion
	compile group: 'org.geotools', name: 'gt-xml', version: geotoolsVersion
	compile group: 'net.canadensys', name: 'narwhal-processor', version: '1.4'
	compile group: 'org.springframework', name: 'spring-webmvc', version: springVersion
	compile group: 'org.springframework', name: 'spring-web', version: springVersion
	compile group: 'org.springframework', name: 'spring-oxm', version: springVersion
	compile group: 'org.springframework', name: 'spring-context-support', version: springVersion
	
	compile group: 'org.hibernate', name: 'hibernate-validator', version: '4.3.1.Final'
	
	compile group: 'log4j', name: 'log4j', version: '1.2.17'
	compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.2'
	
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
	
	compile group: 'org.freemarker', name: 'freemarker', version: '2.3.19'
	
	testCompile group: 'junit', name: 'junit', version: '4.11'
	testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'	
    testCompile group: 'org.springframework', name: 'spring-test', version: springVersion
    testCompile group: 'com.jayway.jsonpath', name: 'json-path', version: '0.8.1'
    testCompile group: 'org.seleniumhq.selenium', name :'selenium-java',version:seleniumVersion
    testCompile group: 'org.seleniumhq.selenium', name :'selenium-firefox-driver',version:seleniumVersion
    testCompile group: 'org.seleniumhq.selenium', name :'selenium-htmlunit-driver',version:seleniumVersion
    
    tomcat("org.apache.tomcat:catalina:${tomcatVersion}")
    tomcat("org.apache.tomcat:coyote:${tomcatVersion}")
    tomcat("org.apache.tomcat:jasper:${tomcatVersion}")
}

//WAR plugin settings
war {
	webInf { from "../canadensys-view-includes/WEB-INF" }
	webInf { from "config/production" }
}

test {
    systemProperties 'file.encoding': 'UTF-8'
    exclude '**/*IntegrationTest.*'
}

tomcatRunWar {
    httpPort = 9966
    contextPath = 'tools'
    stopKey = 'stopKey' 
}

tomcatStop {
	stopKey = 'stopKey'
}

task integrationTest(type: Test) {
    include '**/*IntegrationTest.*'
	
    doFirst {
        tomcatRunWar.daemon = true
        tomcatRunWar.execute()
    }

    doLast {
        tomcatStop.execute()
    }
}

//we use local config file for these tasks
onlyFor(integrationTest) {
	war.webInf { from "config/local" }
}
onlyFor(tomcatRunWar) {
	war.webInf { from "config/local" }
} 

task concatProperties << {
	ant.concat(
		append : "yes",
		encoding : "UTF-8",
		outputencoding : "UTF-8",
		destfile:"${sourceSets.main.output.resourcesDir}/messages_en.properties") {
			fileset(dir:'../canadensys-view-includes/resources/',includes:'messages_en.properties')
	}
	
	ant.concat(
		append : "yes",
		encoding : "UTF-8",
		outputencoding : "UTF-8",
		destfile:"${sourceSets.main.output.resourcesDir}/messages_fr.properties") {
			fileset(dir:'../canadensys-view-includes/resources/',includes:'messages_fr.properties')
	}
}
//Do concatProperties before WAR
war.dependsOn concatProperties
//Do war before integrationTest since we use tomcatRunWar
integrationTest.dependsOn war

def onlyFor(task, config) {
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(task)) { 
            project.configure(project, config)
        }
    }
}
	