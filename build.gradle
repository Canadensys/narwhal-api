apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'

ext {
    tomcatContextPath = 'tools'
}
apply from: "https://raw.githubusercontent.com/Canadensys/canadensys-common/master/gradle/canadensys_web_build_21.gradle"
apply from: "http://dl.bintray.com/scalding/generic/waroverlay.gradle"

//Make sure tomcat will run with the right encoding
System.setProperty('file.encoding', 'UTF-8')

ext {
	sourceEncoding = 'UTF-8'
	servletVersion = '3.1.0'

	springVersion = '4.1.9.RELEASE'
	jacksonVersion = '2.2.3'
	geotoolsVersion = '10.8'
    sitemeshVersion = '3.0.0'
    freemarkerVersion = '2.3.21'

	narwhalProcessorVersion = '1.5.2'
    webCoreVersion = '0.7'
	webThemeVersion = '0.3'

    //Tests
    tomcatVersion = '7.0.59'
    seleniumVersion = '2.44.0'

}

compileJava.options.encoding = sourceEncoding
compileTestJava.options.encoding = sourceEncoding

def group = 'canadensys.net'
def name = 'tools'

// task use to generate the gradle wrapper files
task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

repositories {

    maven {url "http://download.osgeo.org/webdav/geotools"}
    maven {url 'http://download.java.net/maven/2'}

    mavenCentral()
    mavenLocal()
}

dependencies {
	providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: servletVersion
	//providedCompile group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.2.1'
	
	compile group: 'org.geotools', name: 'gt-geojson', version: geotoolsVersion
	compile group: 'org.geotools', name: 'gt-xml', version: geotoolsVersion
	compile group: 'org.geotools', name: 'gt-epsg-hsql', version: geotoolsVersion

	compile("net.canadensys:narwhal-processor:${narwhalProcessorVersion}")
    compile("net.canadensys:canadensys-web-core:${webCoreVersion}")
    compile("net.canadensys:canadensys-webapp-core:${webCoreVersion}@war")
	compile("net.canadensys:canadensys-web-theme:${webThemeVersion}@war")

	compile group: 'org.springframework', name: 'spring-webmvc', version: springVersion
	compile group: 'org.springframework', name: 'spring-web', version: springVersion
	compile group: 'org.springframework', name: 'spring-oxm', version: springVersion
	compile group: 'org.springframework', name: 'spring-context-support', version: springVersion
	
	compile group: 'log4j', name: 'log4j', version: '1.2.17'
	compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.2'
	
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion

    compile group: 'org.sitemesh', name: 'sitemesh', version: sitemeshVersion
	compile group: 'org.freemarker', name: 'freemarker', version: freemarkerVersion
	
	testCompile group: 'junit', name: 'junit', version: '4.11'
	testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'	
	testCompile group: 'org.springframework', name: 'spring-test', version: springVersion
	testCompile group: 'com.jayway.jsonpath', name: 'json-path', version: '0.8.1'
    testCompile group: 'xmlunit', name: 'xmlunit', version: '1.6'
	testCompile group: 'org.seleniumhq.selenium', name :'selenium-java',version:seleniumVersion
	testCompile group: 'org.seleniumhq.selenium', name :'selenium-firefox-driver',version:seleniumVersion
	testCompile group: 'org.seleniumhq.selenium', name :'selenium-htmlunit-driver',version:seleniumVersion

    tomcat("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}")
    tomcat("org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}")
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}")
 }

//WAR plugin settings
war {
	baseName = name
	//webInf { from "../canadensys-view-includes/WEB-INF" }
	webInf { from "config/production" }
}

test {
    systemProperties 'file.encoding': 'UTF-8'
    exclude '**/*IntegrationTest.*'
}

//Tomcat plugin settings
tomcatRunWar {
    httpPort = tomcatHttpPort
    contextPath = tomcatContextPath
    stopKey = 'stopKey'
    outputFile = file('tomcat.log')
}


//we use local config file for these tasks
onlyFor(integrationTest) {
	war.webInf { from "config/local" }
}
onlyFor(tomcatRunWar) {
	war.webInf { from "config/local" }
}

task concatProperties << {
	ant.concat(
		append : "yes",
		encoding : "UTF-8",
		outputencoding : "UTF-8",
		destfile:"${sourceSets.main.output.resourcesDir}/messages_en.properties") {
			fileset(dir:'../canadensys-view-includes/resources/',includes:'messages_en.properties')
	}
	
	ant.concat(
		append : "yes",
		encoding : "UTF-8",
		outputencoding : "UTF-8",
		destfile:"${sourceSets.main.output.resourcesDir}/messages_fr.properties") {
			fileset(dir:'../canadensys-view-includes/resources/',includes:'messages_fr.properties')
	}
}
//Do concatProperties before WAR
war.dependsOn concatProperties
//Do war before integrationTest since we use tomcatRunWar
integrationTest.dependsOn war

def onlyFor(task, config) {
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(task)) { 
            project.configure(project, config)
        }
    }
}
	